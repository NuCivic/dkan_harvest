<?php
/**
 * @file
 * Code for the DKAN Harvest Dashboard feature.
 */

include_once 'dkan_harvest_dashboard.features.inc';


/**
 * Implements hook_menu().
 */
function dkan_harvest_dashboard_menu() {
  $items = array();
  $items['admin/dkan/harvest/dashboard'] = array(
    'title' => 'DKAN Harvest Dashboard',
    'access callback' => 'user_access',
    'access arguments' => array('admininster harvest'),
    'page callback' => 'dkan_harvest_dashboard_sources_page',
  );
  
  $items['admin/dkan/harvest/dashboard/sources'] = array(
    'title' => 'Sources',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('admininster harvest'),
    'weight' => -10,
    'page callback' => 'dkan_harvest_dashboard_sources_page',
  );

  $items['admin/dkan/harvest/dashboard/datasets'] = array(
    'title' => 'Datasets',
    'type' => MENU_LOCAL_TASK,
    'access callback' => 'user_access',
    'access arguments' => array('admininster harvest'),
    'weight' => 1,
    'page callback' => 'dkan_harvest_dashboard_datasets_page',
  );  
  return $items;
}

/**
 * Dataset list page callback
 */
function dkan_harvest_dashboard_sources_page() {
  return views_embed_view('dkan_harvest_dashboard', 'harvest_sources');
}

/**
 * Sources list page callback
 */
function dkan_harvest_dashboard_datasets_page() {
  return views_embed_view('dkan_harvest_datasets', 'harvest_datasets');
}

function dkan_harvest_dashboard_form_alter(&$form, $form_state, $form_id) {
  if(  $form_id == 'views_exposed_form' 
    && $form_state['view'] 
    && $form_state['view']->name ) {

    $module_path = drupal_get_path('module', 'dkan_harvest_dashboard');
    drupal_add_css( $module_path . '/dkan_harvest_dashboard.css');
    $form['created']['max']['#title'] = '';
    $form['changed']['max']['#title'] = '';
    $form['created']['min']['#attributes']['placeholder'] = t('From');
    $form['created']['max']['#attributes']['placeholder'] = t('To');
    $form['changed']['min']['#attributes']['placeholder'] = t('From');
    $form['changed']['max']['#attributes']['placeholder'] = t('To');
  }
}

/**
 * Implements hook_preprocess_views_view_table()
 */
function dkan_harvest_dashboard_preprocess_views_view_table(&$vars) {
  // Override the dashboard status table classes.
  if ($vars['view']->name == 'dkan_harvest_dashboard'
  && isset($vars['fields']['dkan_harvest_harvest_status'])) {
    foreach ($vars['rows'] as $index => $row) {
      switch ($row['dkan_harvest_harvest_status']) {
      case 'N/A' :
        $vars['field_classes']['dkan_harvest_harvest_status'][$index] .= ' alert-warning';
        break;
      case 'ERROR' :
        $vars['field_classes']['dkan_harvest_harvest_status'][$index] .= ' alert-danger';
        break;
      case 'OK' :
        $vars['field_classes']['dkan_harvest_harvest_status'][$index] .= ' alert-success';
        break;
      }
    }
  }
}

/**
 * Implements hook_views_bulk_operations_form_alter().
 */
function dkan_harvest_dashboard_views_bulk_operations_form_alter(&$form, &$form_state, $vbo) {
  $form_id = $form['#form_id'];
  $delete_action = 'action::views_bulk_operations_delete_item';

  // If the form is the VBO form on harvest sources dashboard AND
  if ($form_id == 'views_form_dkan_harvest_dashboard_harvest_sources' &&
      // The user is on the confirmation step AND
      $form_state['step'] == 'views_bulk_operations_confirm_form' &&
      // There are any values available AND the VBO operation is 'delete'
      isset($form_state['values']) && $form_state['values']['operation'] == $delete_action) {

    // Add list of available operations.
    $options = array(
      t('Delete content.'),
      t('Unpublish content.'),
      t('Leave content publish but mark as orphan.')
    );
    $form['dataset_op'] = array(
      '#type' => 'radios',
      '#options' => $options,
      '#default_value' => $options[0],
    );

    // Set description.
    $selected_sources = $form_state['selection'];
    $form['description']['#markup'] = dkan_harvest_build_delete_confirmation_description($selected_sources);

    // Modify submit button.
    $form['actions']['submit']['#value'] = t('Delete Source');
    // Set up custom submit handler. Be sure that is the firs handler that is going to be executed.
    array_unshift($form['actions']['submit']['#submit'], 'dkan_harvest_dashboard_vbo_confirm_submit');
  }
}

/**
 * Custom submit handler for VBO delete operation on Harvest Sources.
 */
function dkan_harvest_dashboard_vbo_confirm_submit($form, $form_state) {

  $selected_sources = $form_state['selection'];
  $datasets_op = $form_state['values']['dataset_op'];

  dkan_harvest_process_source_datasets($selected_sources, $datasets_op);
}

/**
 *
 */
function dkan_harvest_build_delete_confirmation_description($sources) {

  $markup = '<p>' . t('The following sources were selected to be deleted:') . '</p>';
  $markup .= '<ul>';
  foreach ($sources as $source_id) {
    $source = entity_load_single('node', $source_id);
    $source_datasets = dkan_harvest_get_datasets_from_source($source_id);
    $markup .= '<li>' . $source->title . ': ' . count($source_datasets) . t(' Datasets') . '</li>';
  }
  $markup .= '</ul>';
  $markup .= '<p></br>' . t('Plese select the operation you want to perform on the
    associated content (datasets and resources):') . '</p>';

  return $markup;
}
